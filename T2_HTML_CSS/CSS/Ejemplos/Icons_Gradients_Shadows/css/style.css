/* Los iconos se tratan como texto, usamos color en vez de 
background-color */
i:nth-child(even) {
    color: blue;
}

i:nth-child(odd) {
    color: orangered;
}

i.menu {
    color: green;
}


/* Grandients */
[class^="gradient"] {
    height: 150px;
    margin-bottom: 10px;
    border: 1px solid black;
}

div.gradient-3 {
    height: 300px;
}

/* Dentro de linear-gradient escribrimos: (direccion, color1, color2 */
.gradient-1 {
    background: linear-gradient(to top, white, teal);
}

/* Podemos escribir más colores, y configurar donde está el color real
de cada uno*/
.gradient-2 {
    background: linear-gradient(to right, blue 5%, white 15%, teal);
}

/* Podemos poner una imagen de fondo y aplicar una capa de gradientes,
tendríamos que usar el factor de opacidad en los colores*/
.gradient-3 {
    background: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0)), url(../images/rome.jpg);
}

.gradient-4 {
    background: radial-gradient(yellow 50%, green, black);
    width: 150px;
}


/* Sombras */
.gradient-4 {
    box-shadow: 5px 2.5px 15px black;
}
/* Tiene 4 elementos: offset-X offset-Y Blur(difuminado) Color;
Si offset-X es negativo la sombra sale a la izquierda y si 
offset-Y es negativo irá hacia arriba*/


/* Transformaciones */
div.transform {
    height: 100px;
    width: 100px;
    background-color: #333;
    margin-bottom: 250px;

    /* Se aplican todas las transformaciones en una sola declaración */
    transform: translate(300px, 0) rotate(45deg) scale(1.5) skew(67deg, 0);
}

/* translate(eje-X, eje-Y), mueve como la posición relativa */
/* rotate(grados), rota el elemento */
/* scale(factor), escala el elemento. Base es 1, menor reduce y mayor amplia */
/* skew(grados eje-X, grados eje-X), sesga el elemento */


/* Transiciones */
.transitions {
    height: 100px;
    width: 100px;
    margin-left: 100px;
    background-color: darkcyan;
    color: white;
    cursor: pointer;

    display: flex;
    justify-content: center;
    align-items: center;

    /* La propiedad que queremos que se vea afectada por la transicion */
    /* En el ejemplo se ve como no hay transición de cyan al rojo porque
    background-color no está en transition-property  */
    transition-property: transform; 
    transition-duration: 2s;
    transition-delay: 1s;
    transition-timing-function: ease-in-out;
    /* transition: transform 2s 1s ease-in-out; es el shorthand para lo anterior */
}
    
.transitions:hover {
    transform: scale(1.3) rotate(3deg);
    background-color: red;
    font-size: larger;
}


/* Animaciones */
.text-animation {
    animation-name: slidein; /* Debe coincidir con @keyframes */
    animation-duration: 2s; /* La duración de la animación */
    animation-iteration-count: infinite; /* El número de repeticiones de la animación */
    /* animation: es el shorthand para lo anterior */
}

/* Aquí se crea la animación */
@keyframes slidein {
    /* Reglas iniciales */
    from {
        margin-left: 100%;
    }

    /* Reglas intermedias */
    50% {
        color: red;
    }

    75% {
        color: cyan;
    }

    /* Reglas finales */
    to {
        margin-left: 0;
        color:cyan;
    }
}